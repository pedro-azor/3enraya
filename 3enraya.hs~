import Data.List 
import System.IO
 
-- ---------------------------------------------------------------------
-- 1. 
-- ---------------------------------------------------------------------
 
profundidadDeBusqueda :: Int
profundidadDeBusqueda = 6 
 
-- ---------------------------------------------------------------------
-- 2.
-- ---------------------------------------------------------------------
 
type Posicion = Int
 
-- ---------------------------------------------------------------------
-- 3.
-- ---------------------------------------------------------------------
 
type Posiciones = [Posicion]
 
-- ---------------------------------------------------------------------
-- 4.
-- ---------------------------------------------------------------------
 
data Tablero = Tab Posiciones Posiciones 
               deriving Show
 
-- ---------------------------------------------------------------------
-- 5.
-- ---------------------------------------------------------------------
 
tableroInicial :: Tablero
tableroInicial = Tab [] []
 
-- ---------------------------------------------------------------------
-- 6.
-- ---------------------------------------------------------------------
 
turnoDeX :: Tablero -> Bool
turnoDeX (Tab xs os) = 
    length xs == length os
 
-- ---------------------------------------------------------------------
-- 7.
-- ---------------------------------------------------------------------
 
pone :: Tablero -> Posicion -> Tablero
pone (Tab xs os) p | turnoDeX (Tab xs os) = Tab (p:xs) os
                   | otherwise            = Tab xs (p:os)
 
-- ---------------------------------------------------------------------
-- 8.
-- ---------------------------------------------------------------------
 
completo :: Tablero -> Bool
completo (Tab xs os) = length xs + length os == 16
 
-- ---------------------------------------------------------------------
-- 9.
-- ---------------------------------------------------------------------
 
subconjunto :: Posiciones -> Posiciones -> Bool
subconjunto s1 s2 = all (`elem` s2) s1
 
-- ---------------------------------------------------------------------
-- 10.
-- ---------------------------------------------------------------------
 
tieneLinea :: Posiciones -> Bool
tieneLinea ps = 
    subconjunto [1,2,3,4] ps ||subconjunto [5,6,7,8] ps ||subconjunto [9,10,11,12] ps || subconjunto [13,14,15,16] ps 
    ||subconjunto [1,5,9,13] ps ||subconjunto [2,6,10,14] ps || subconjunto [3,7,11,15] ps ||subconjunto [4,8,12,16] ps 
    || subconjunto [1,6,11,16] ps || subconjunto [4,7,10,13] ps 
 
-- ---------------------------------------------------------------------
-- 11.
-- ---------------------------------------------------------------------
 
tieneGanador :: Tablero -> Bool
tieneGanador (Tab xs os) = tieneLinea xs || tieneLinea os
 
-- ---------------------------------------------------------------------
-- 12.
-- ---------------------------------------------------------------------
 
data Arbol a = Nodo a [Arbol a]
 
-- ---------------------------------------------------------------------
-- 13.
-- ---------------------------------------------------------------------
 
posicionesLibres :: Tablero -> Posiciones
posicionesLibres (Tab xs os) = [1..16] \\ (xs++os)
 
-- ---------------------------------------------------------------------
-- 14.
-- ---------------------------------------------------------------------
 
siguientesTableros :: Tablero -> [Tablero]
siguientesTableros t 
    | tieneGanador t = [] 
    | otherwise      = map (pone t) (posicionesLibres t)
 
-- ---------------------------------------------------------------------
-- 15.
-- ---------------------------------------------------------------------
 
construyeArbol :: Tablero -> Arbol Tablero
construyeArbol t = 
    Nodo t (map construyeArbol (siguientesTableros t)) 
 
-- ---------------------------------------------------------------------
-- 16.
-- ---------------------------------------------------------------------
 
type Valor = Int
 
-- ---------------------------------------------------------------------
-- 17. 
-- ---------------------------------------------------------------------
 
valores :: [Arbol (Valor,Tablero)] -> [Valor]
valores vts = [v | Nodo (v,_) _ <- vts]
 
-- ---------------------------------------------------------------------
-- 18.
-- ---------------------------------------------------------------------
 
maximiza :: Arbol Tablero -> Arbol (Valor,Tablero)
maximiza (Nodo t []) | tieneGanador t = Nodo (-1,t) []
                     | otherwise      = Nodo (0,t) []                                        
maximiza (Nodo t ts) = Nodo (maximum (valores vts),t) vts
    where vts = map minimiza ts
 
-- ---------------------------------------------------------------------
-- 19.
-- ---------------------------------------------------------------------
 
minimiza :: Arbol Tablero -> Arbol (Valor,Tablero)
minimiza (Nodo t []) | tieneGanador t = Nodo (1,t) []
                     | otherwise      = Nodo (0,t) []
minimiza (Nodo t ts) = Nodo (minimum (valores vts),t) vts
    where vts = map maximiza ts
 
-- ---------------------------------------------------------------------
-- 20.
-- ---------------------------------------------------------------------
 
poda :: Int -> Arbol a -> Arbol a
poda n (Nodo x as) | n == 0    = Nodo x []
                   | otherwise = Nodo x (map (poda (n-1)) as)
 
-- ---------------------------------------------------------------------
-- 21.
-- ---------------------------------------------------------------------
 
selecciona :: Arbol (Valor,Tablero) -> Tablero
selecciona (Nodo (v,_) ts) = 
    head [t | Nodo (v',t) _ <- ts, v'==v]
 
-- ---------------------------------------------------------------------
-- 22. 
-- ---------------------------------------------------------------------
 
mejorMovimiento :: Tablero -> Tablero
mejorMovimiento = 
    selecciona . maximiza . poda profundidadDeBusqueda . construyeArbol
 
-- ---------------------------------------------------------------------
-- 23.
-- ---------------------------------------------------------------------
 
muestraPosicion :: Tablero -> Posicion -> String
muestraPosicion (Tab xs os) p 
    | p `elem` xs = "X"
    | p `elem` os = "O"
    | otherwise   = show p
 
-- ---------------------------------------------------------------------
-- 24.
-- ---------------------------------------------------------------------
 
muestraLinea :: Tablero -> [Posicion] -> String
muestraLinea t = 
    concat . intersperse "|" . map (muestraPosicion t)
 
-- ---------------------------------------------------------------------
-- 25.
-- ---------------------------------------------------------------------
 
muestraTablero :: Tablero -> String
muestraTablero t = 
    muestraLinea t [1..4] ++ "\n-+-+-+-+-\n" ++
    muestraLinea t [5..8] ++ "\n-+-+-+-+-\n" ++
    muestraLinea t [9..12] ++ "\n-+-+-+-+-\n" ++
    muestraLinea t [13..16]
 
-- ---------------------------------------------------------------------
-- 26. 
-- ---------------------------------------------------------------------
 
main :: IO ()
main = do
  hSetBuffering stdout NoBuffering           -- 1
  putStrLn "Cuatro en raya"                    -- 2
  putStrLn (muestraTablero tableroInicial)   -- 3
  putStr "Comienza el juego? (s/n) "         -- 4
  l <- getLine                               -- 5
  if head l `elem` "sS"                      -- 6
     then humano tableroInicial              -- 7
     else computadora tableroInicial         -- 8
 
-- ---------------------------------------------------------------------
-- 27.
-- ---------------------------------------------------------------------
 
humano :: Tablero -> IO ()
humano t = do 
  putStr "\nIndica el lugar donde colocar la ficha: " -- 1
  l <- getLine                                        -- 2 
  let t' = pone t (read l :: Posicion)                -- 3
  putStrLn (muestraTablero t')                        -- 4
  if tieneGanador t'                                  -- 5
     then putStrLn "Has ganado."                      -- 5.a
     else if completo t'                              -- 5.b
             then putStrLn "Empate."                  -- 5.b.1
             else computadora t'                      -- 5.b.2
 
-- ---------------------------------------------------------------------
-- 28.
-- ---------------------------------------------------------------------
 
computadora :: Tablero -> IO ()
computadora t = do
  putStrLn "\nMi jugada:"            -- 1
  let t' = mejorMovimiento t         -- 2
  putStrLn (muestraTablero t')       -- 3
  if tieneGanador t'                 -- 4
     then putStrLn "He ganado."      -- 4.a
     else if completo t'             -- 4.b
             then putStrLn "Empate." -- 4.b.1
             else humano t'          -- 4.b.2
